// <auto-generated />
using System;
using System.Collections.Generic;
using Atmos.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Atmos.Database.Migrations
{
    [DbContext(typeof(AtmosDbContext))]
    [Migration("20240714121622_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Atmos.Domain.Entities.Content.Article", b =>
                {
                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("ClassificationSlug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("FirstReleaseTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_release_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean")
                        .HasColumnName("is_draft");

                    b.Property<DateTimeOffset>("LastEditTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_edit_time");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Slug");

                    b.HasIndex("ClassificationSlug");

                    b.ToTable("article");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Content.Classification", b =>
                {
                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Slug");

                    b.ToTable("classification");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Content.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("CommentableEntityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("commentable_entity_id");

                    b.Property<string>("CommentableEntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("commentable_entity_type");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentId");

                    b.HasIndex("CommentableEntityId", "CommentableEntityType");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Content.Note", b =>
                {
                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("FirstReleaseTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_release_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean")
                        .HasColumnName("is_draft");

                    b.Property<DateTimeOffset>("LastEditTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_edit_time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Slug");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Content.SinglePage", b =>
                {
                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("FirstReleaseTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_release_time");

                    b.Property<DateTimeOffset>("LastEditTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_edit_time");

                    b.Property<string>("SinglePageType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("single_page_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Slug");

                    b.ToTable("SinglePages");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Identity.SocialLogin", b =>
                {
                    b.Property<Guid>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("connection_id");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("platform");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ConnectionId");

                    b.HasIndex("UserId");

                    b.HasIndex("Platform", "Identifier");

                    b.ToTable("social_login");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Identity.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string[]>("Region")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("region");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Region");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("subscription");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<List<string>>("EmailAddresses")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("email_addresses");

                    b.Property<bool>("IsSiteOwner")
                        .HasColumnType("boolean")
                        .HasColumnName("is_site_owner");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.HasKey("UserId");

                    b.HasIndex("EmailAddresses");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("EmailAddresses"), "GIN");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Content.Article", b =>
                {
                    b.HasOne("Atmos.Domain.Entities.Content.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationSlug")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classification");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Content.Comment", b =>
                {
                    b.HasOne("Atmos.Domain.Entities.Identity.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atmos.Domain.Entities.Content.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Atmos.Domain.Entities.Content.Article", null)
                        .WithMany("Comments")
                        .HasForeignKey("CommentableEntityId", "CommentableEntityType")
                        .HasPrincipalKey("Slug", "ContentType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atmos.Domain.Entities.Content.Note", null)
                        .WithMany("Comments")
                        .HasForeignKey("CommentableEntityId", "CommentableEntityType")
                        .HasPrincipalKey("Slug", "ContentType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atmos.Domain.Entities.Content.SinglePage", null)
                        .WithMany("Comments")
                        .HasForeignKey("CommentableEntityId", "CommentableEntityType")
                        .HasPrincipalKey("Slug", "ContentType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Identity.SocialLogin", b =>
                {
                    b.HasOne("Atmos.Domain.Entities.Identity.User", "User")
                        .WithMany("SocialLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Identity.Subscription", b =>
                {
                    b.HasOne("Atmos.Domain.Entities.Identity.User", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("Atmos.Domain.Entities.Identity.Subscription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Content.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Content.Comment", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Content.Note", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Content.SinglePage", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Atmos.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SocialLogins");

                    b.Navigation("Subscription")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
